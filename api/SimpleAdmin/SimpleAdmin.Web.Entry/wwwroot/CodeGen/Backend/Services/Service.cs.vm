using Furion.FriendlyException;
using Mapster;
using SimpleAdmin.Core;
using Microsoft.Extensions.Logging;
using Microsoft.AspNetCore.Mvc;
using SqlSugar;

namespace @(@Model.ServicePosition);

/// <summary>
/// <inheritdoc cref="I@(@Model.ServiceName)"/>
/// </summary>
public class @(@Model.ServiceName) : DbRepository<@(@Model.ClassName)>, I@(@Model.ServiceName)
{
    private readonly ILogger<@(@Model.ServiceName)> _logger;
	
    public @(@Model.ServiceName)(ILogger<@(@Model.ServiceName)> logger)
    {
         this._logger = logger;
    }
	
	
    /// <inheritdoc/>
    public async Task<SqlSugarPagedList<@(@Model.EntityName)>> Page(@Model.PageInput input)
    {
        var query = Context.Queryable<@(@Model.EntityName)>()
                         @{PageWhereIf();}
                         //.WhereIF(!string.IsNullOrEmpty(input.SearchKey), it => it.Name.Contains(input.SearchKey))//根据关键字查询
                         .OrderByIF(!string.IsNullOrEmpty(input.SortField), $"{input.SortField} {input.SortOrder}")
                         @{PageSortCode();}
        var pageInfo = await query.ToPagedListAsync(input.Current, input.Size);//分页
        return pageInfo;
    }
	
    /// <inheritdoc />
    public async Task Add(@Model.AddInput input)
    {
        var @Model.ClassNameFirstLower = input.Adapt<@(@Model.EntityName)>();//实体转换
        await CheckInput(@Model.ClassNameFirstLower);//检查参数
        await InsertAsync(@Model.ClassNameFirstLower);//插入数据
    }
	
    /// <inheritdoc />
    public async Task Edit(@Model.EditInput input)
    {
        var @Model.ClassNameFirstLower  = input.Adapt<@(@Model.EntityName)>();//实体转换
        await CheckInput(@Model.ClassNameFirstLower);//检查参数
        await UpdateAsync(@Model.ClassNameFirstLower);//更新数据
    }
	
    /// <inheritdoc />
    public async Task Delete(List<BaseIdInput> input)
    {
        //获取所有ID
        var ids = input.Select(it => it.Id).ToList();
        if (ids.Count > 0)
        {
           await DeleteByIdsAsync(ids.Cast<object>().ToArray());//删除数据
        }
    }
	
    /// <inheritdoc />
    /// <inheritdoc />
    public async Task<@(@Model.EntityName)> Detail(BaseIdInput input)
    {
        var @Model.ClassNameFirstLower  =  await GetFirstAsync(it => it.Id == input.Id);
        return @Model.ClassNameFirstLower ;

    }
	#region 方法
	
    /// <summary>
    /// 检查输入参数
    /// </summary>
    /// <param name="@(@Model.ClassNameFirstLower)"></param>
    private async Task CheckInput(@Model.EntityName @Model.ClassNameFirstLower)
    {
      
    }

    #endregion

}

@{
//生成查询条件
void PageWhereIf()
{
  var tableFieIds=@Model.TableFields;//获取字段
  foreach (var column in tableFieIds){//遍历字段
  if(column.QueryWhether=="Y")//判断是否查询
  {
    if(@column.FieldNetType.ToLower() == "string")//判断是否是字符串类型
    {
      switch (@column.QueryType)//遍历查询方式
      {
        case "eq"://等于
                         @:.WhereIF(!string.IsNullOrWhiteSpace(input.@column.FieldName), it => it.@(@column.FieldName) == input.@(@column.FieldName))
        break;
        case "like"://包含
                         @:.WhereIF(!string.IsNullOrWhiteSpace(input.@column.FieldName), it => it.@(@column.FieldName).Contains(input.@(@column.FieldName).Trim()))
        break;
		case "notlike"://不包含
                         @:.WhereIF(!string.IsNullOrWhiteSpace(input.@column.FieldName), it => !it.@(@column.FieldName).Contains(input.@(@column.FieldName).Trim()))
        break;
	    case "ne"://不等于
                         @:.WhereIF(!string.IsNullOrWhiteSpace(input.@column.FieldName), it => it.@(@column.FieldName) != input.@(@column.FieldName))
        break;
      }
	}
	else if(@column.EffectType=="datepicker"){//如果是时间类型则生成时间戳
                         @:.WhereIF(input.Start@(@column.FieldName)!=null||input.End@(@column.FieldName)!=null, it=> SqlFunc.Between(it.@column.FieldName, input.Start@(@column.FieldName), input.End@(@column.FieldName)))
	}
	else{//其他
      switch (@column.QueryType)//遍历查询方式
      {
        case "eq"://等于
                         @:.WhereIF(input.@column.FieldName!=null, it => it.@(@column.FieldName) == input.@(@column.FieldName))
        break;
		case "ne"://不等于
                         @:.WhereIF(input.@column.FieldName!=null, it => it.@(@column.FieldName) != input.@(@column.FieldName))
        break;
		case "gt"://大于
                         @:.WhereIF(input.@column.FieldName!=null, it => it.@(@column.FieldName) > input.@(@column.FieldName))
        break;
		case "ge"://大于等于
                         @:.WhereIF(input.@column.FieldName!=null, it => it.@(@column.FieldName) >= input.@(@column.FieldName))
        break;
		case "lt"://小于
                         @:.WhereIF(input.@column.FieldName!=null, it => it.@(@column.FieldName) < input.@(@column.FieldName))
        break;
		case "le"://小于等于
                         @:.WhereIF(input.@column.FieldName!=null, it => it.@(@column.FieldName) <= input.@(@column.FieldName))
        break;
      }
	}
  }
  }
}
}

@{
//生成根据SortCode排序
void PageSortCode()
{
 var tableFieIds=@Model.TableFields;//获取字段
 var hasSortCode= tableFieIds.Any(it => it.FieldName == "SortCode");
 if(hasSortCode){//如果有sortcode字段
                         @:.OrderBy(it => it.SortCode);//排序
 }else{
                         @:;
 }
}
}